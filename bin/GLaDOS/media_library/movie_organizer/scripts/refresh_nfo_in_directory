#!/bin/bash
##############################
### refresh_nfo - writes a
### new .nfo file from db
### Author: Jeremiah Jackson
##############################

###############################################################
### This section sets the DIR variable to the current path
### allowing the script to run from anywhere on the filesystem
### as long as the directory structure within this app stays
### intact.
###############################################################
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#############################
### Libraries and Functions
#############################
source $DIR/lib/vars
for f in $DIR/lib/functions/*; do source $f; done
OIFS=$IFS

searchTerms=

files=`find . -name *.nfo`

readarray -t nfoFiles <<<"$files"

startTime=`date +%s`

if [ "$1" != "" ]; then
 iterator="$1"
else
 iterator=0
fi

info "${#nfoFiles[@]} Files found..."
while [ $iterator -lt ${#nfoFiles[@]} ]; do
 Ofilename="${nfoFiles[$iterator]}"
echo -en "${red}$iterator${nc} / ${Cyan}${#nfoFiles[@]}${nc}\r"
#echo -en ": ${yellow}$Ofilename${NC}"
 myNFO=`cat "$Ofilename"`
 myfilename=$(echo "$Ofilename" |sed 's;.*/;;g')
 myfilename="${myfilename:0:$((${#myfilename}-4))}"

# echo $myfilename
 
 dbID=$(parse_NFO "$myNFO")
#echo -e "dbid is $dbID"

  if [ "$dbID" == "" ]; then
	echo -e "${red}$myfilename not found in DB!${NC}"
	exit 1
  fi 
 grab_all_from_db $dbID
 build_nfo "$myfilename"
 mv "$tempPath/$myfilename.nfo" "$Ofilename"
iterator=$((iterator+1))
#echo "iterator is now $iterator"
done
endTime=`date +%s`

runtime=$((endTime-startTime))

echo -e "Completed after ${red}$runtime${NC} seconds"
IFS=$OIFS

