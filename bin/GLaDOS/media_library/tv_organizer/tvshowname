#!/bin/bash

source /root/.bin/lib/colors
## Get Directories for Existing Shows
if [ "$1" == "" ]; then
	echo "No file specified. Exiting."
	exit 0;
fi



if [ "$2" == "" ]; then
	inputFile=`find . -type f -name "$1"`
else
	inputFile=`find "$2" -type f -name "$1"`
fi
inputFile=${inputFile:2:$((${#inputFile}-2))}


originalFile=$inputFile
doNotRSS="nofeed"
showpath="/shares/video/tv/"

pathlen=${#showpath}
DirArray=($showpath*/)

if [ -n $3 ]; then
 FoundShowName=$3
else
 FoundShowName=
fi

if [ -n $4 ]; then
 Season=$4
else
 Season=
fi

EN=
Title=
FILESIZE=`du -h "$inputFile" | awk '{print $1;}'`"B"


## RSS Path and Variables
RSS_Path="/shares/filesystem/apache/rss/tv/tv.rss"
#RSS_Path="$showpath/tv.xml"

## Remove leading path from Direcotry path
counter=0
while [ $counter -lt ${#DirArray[@]} ]; do
	word=${DirArray[$counter]}
	len=${#word}
	let len=$len-$pathlen
	let len=$len-1
	word=${word:$pathlen:$len}
#	echo "inserting $word at $counter"
	DirArray[$counter]=$word
	let counter=$counter+1
done


## function to get filename into appropriate format
formatFileName() {
fnew=$1
#change spaces to periods
fnew=`echo "$fnew" | sed 's/\ /./g'`

#change brackets and parens to periods
fnew=`echo "$fnew" |sed 's/\ \[/./g'`
fnew=`echo "$fnew" |sed 's/\]\ /./g'`

#remove commas, apsotrophes, quotes, and question marks
fnew=`echo "$fnew" |sed "s/'//g"`
fnew=`echo "$fnew" |sed "s/,//g"`
fnew=`echo "$fnew" |sed 's/"//g'`
fnew=`echo "$fnew" |sed "s/?//g"`

fnew=`echo "$fnew" |sed "s/\.-\././g"`
#echo "$fnew"

#change things like 4x02 to S04E02
fnew=`echo "$fnew" |sed -r "s#([1-9]{1,2}x)#S0\1#g"`
#echo "-$fnew"
fnew=`echo "$fnew" |sed -r "s#x([0-9]{2})#E\1#g"`
#echo "-- $fnew"
fnew=`echo "$fnew" |sed -r "s#S0([0-9]{2})#S\1#g"`
#echo "--- $fnew"
fnew=`echo "$fnew" |sed "s#0S#S#g"`
#echo "---- $fnew"
fnew=`echo "$fnew" |sed -r "s#.([0-9]{1,2}E[0-9]{1,2})#.S\1#g"`
#echo "----- $fnew"

inputFile=$fnew

#echo "inputFile is now $inputFile"

} # end formatFileName


#This should take the input file and rename for appropriate use
formatFileName "$inputFile"

## function to check if season folder exists
## Assuming that all seasons have leading zeros
checkSeasonFolder() {
 cs_showPath=$showpath$1"/"
 cs_seasonNum=$2
 cs_found=`find "$cs_showPath" -iname Season\ $cs_seasonNum`
 yesNo=
 if [ ! -n "$cs_found" ]; then
        echo "Season $cs_seasonNum not found. Existing season folders exist:"
        echo ""
        echo "   * $1 *"
#        echo `ls "$cs_showPath"`
	group=`find "$cs_showPath" -maxdepth 1 -type d ! -iname ".*"`
	echo "$group"
        echo ""
        echo ""
        while [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; do
        read -p "Would you like to create Season $2? [Y/n]: " yesNo
                if [ -z $yesNo ]; then
                        yesNo='y'
                fi
                if [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; then
                        yesNo=
                fi
        done
        if [ "${yesNo,,}" == "n" ]; then
                echo "Exiting..."
                exit 0
        else
                fullpath=`echo $1 |sed 's/\ /\\\ /g'`
                fullpath=$showpath$fullpath
		fullpath="$fullpath/Season\ $2"
		fullpath=`echo ${fullpath//[\\\]/}`
                `mkdir "$fullpath"`
        fi #if yesNo
 fi #if season doesn't exist

} #end checkSeasonFolder


## For each existing show, count the number of words
## in the title, then compare that many words from the
## filename.
checkShowName() {
## Parse out the file name
#filename=$(basename $1)
filename="$1"

extension="${filename##*.}"
filename="${filename%.*}"

IFS='.' read -a ShowNameArray <<< "$filename"


counter=0
while [ $counter -lt ${#DirArray[@]} ]; do
	IFS=' ' read -a DirName <<< "${DirArray[$counter]}"
	numwords=${#DirName[@]}
#	echo "${DirArray[$counter]} has $numwords words"
	loop=0
	while [ $loop -lt $numwords ]; do
		a=${ShowNameArray[$loop]}
		b=${DirName[$loop]}
	
		#special case names
		case "$b" in
			"Grey's")
				b="Greys"
				;;
			"Bob's")
				b="Bobs"
				;;
			"(1987)")
				b="1987"
				;;
			"(2003)")
				b="2003"
				;;
			"(2012)")
				b="2012"
				;;
			"(1994)")
				b="1994"
				;;
			"(2001)")
				b="2001"
				;;
		esac

#		echo "Comparing $a to $b"
		if [ ${a,,} != ${b,,} ]; then
			break
		else
			let limit=$numwords-1
#			echo "Checking ${DirArray[$counter]}, counter is $counter, loop is $loop while limit is $limit"
			if [ "${a,,}" = "csi" ] || [ $loop = $limit ]; then
				FoundShowName=${DirArray[$counter]}
			        counter=${#DirArray[@]}
				break
			else
#		echo "Comparing $a to $b"
				let loop=$loop+1
			fi
		fi
	done	
	let counter=$counter+1
done


## Verify the Show name found
if [ "$FoundShowName" = "" ]; then
	MyNewName=
	##Replace these two lines
	echo "No Series found automatically."
	while [ -z "$MyNewName" ]; do
		read -p "Please enter the Series Name: " MyNewName
	done
	MyNewName=`echo "$MyNewName" |tr ' ' '.'`	
	echo checking "$MyNewName"
	checkShowName "$MyNewName"
#	FoundShowName="True Blood"
	##Replace
fi

} ## end checkShowName
if [ "$FoundShowName" = "" ]; then
	checkShowName "$inputFile"
fi
## We now have a verified folder to put the show in. Get the Season
## and episode information next.
PromptForEpInfo() {
	p_seasonNum=
	p_epNum=
	echo "Directory Listing for $FoundShowName:"
	echo ""
	echo `ls "$showpath$FoundShowName"`
#	find "$showpath$FoundShowName" -maxdepth 1 -type d
	echo "------"
	echo $inputFile 
	while ! [[ $p_seasonNum =~ $numbers ]]; do
		read -p "Please enter a season number: " p_seasonNum
        done
	 if [[ ${#p_seasonNum} -lt 2 ]] && [[ "$p_seasonNum" -lt "10" ]]; then
		p_seasonNum="0"$p_seasonNum
	 fi
	Season=$p_seasonNum
	
        read -p "Please enter an episode number: " p_epNum
         if [[ ${#p_epNum} -lt 2 ]] && [[ "$p_epNum" -lt "10" ]]; then
                p_epNum="0"$p_epNum
         fi
        EN=$p_epNum
#echo "Season $Season Episode $EN"
}


IFS=' ' read -a DirName <<< $FoundShowName
nextword=${#DirName[@]}
EP=${ShowNameArray[$nextword]}
if [ -n $EP ]; then
while [ "${EP:0:1}" != "S" ] && [ "${EP:0:1}" != "s" ]; do
#echo "$EP"
	if [[ $EP =~ $numbers ]]; then
		if [ ${#EP} = 3 ]; then
			EP="S0${EP:0:1}E${EP:1}"
		elif [ ${#EP} = 4 ]; then
		     if [ "${EP:0:2}" != "19" ] && [ "${EP:0:2}" != "20" ]; then
			EP="S${EP:0:2}E${EP:2}"
		     else
			nextword=$((nextword+1))
			EP=${ShowNameArray[$nextword]}
		     fi
		else
			PromptForEpInfo
			EP="S$Season"
                        EP=$EP"E$EN"
		fi
	else
	if [ $nextword -lt ${#ShowNameArray[@]} ]; then
		let nextword=$nextword+1
		EP=${ShowNameArray[$nextword]}
#		echo "Moved EP to $EP"
		if [ "$EP" = "" ]; then
			PromptForEpInfo
			EP="S$Season"
			EP=$EP"E$EN"
		fi
	else
		PromptForEpInfo
		break
	fi
	fi
done
	if [ "$EP" != "" ]; then
		Season=${EP:1:2}
		EN=${EP:4:2}

#This line is for when episode numbers are off
#EN=$((EN-9))
	fi
#echo "Season $Season, Episode $EN"
else
	PromptForEpInfo
fi

#echo "Checking $FoundShowName $Season"
checkSeasonFolder "$FoundShowName" "$Season"

## We now have Show info, get the title
promptForTitle() {
	SHOWNAME=$1
	#Special-case formatting for some shows
	case "$SHOWNAME" in
		"Greys Anatomy")
			SHOWNAME="Grey's Anatomy"
			;;
		"Bobs Burgers")
			SHOWNAME="Bob's Burgers"
			;;
			
	esac

	season=$2
	leadin=${season:0:1}
	if [ "$leadin" == "0" ]; then
		season=${season:1:1}
	fi
	readTitleFromOnline "$SHOWNAME" "$season" "$3"

} ##end promptForTitle

readTitleFromOnline(){
SHOWNAME=$1
Season=$2
Episode=$3
URL="http://epguides.com/"

#Remove spacing from show name
SHOWNAME=`echo "$SHOWNAME" | tr -d ' '`

#Remove apostrophe from show name
SHOWNAME=`echo "$SHOWNAME" | tr -d "'"`

#Remove leading 'The'
FirstThree=${SHOWNAME:0:3}
if [ "$FirstThree" == "The" ]; then
        SHOWNAME=${SHOWNAME:3:((${#SHOWNAME}-3))}
fi



#Special Show names
case $SHOWNAME in

	"Goldbergs")
		SHOWNAME="Goldbergs_2013"
		;;
	"Tick(1994)")
		SHOWNAME="Tick_1994"
		;;
	"Tick(2001)")
		SHOWNAME="Tick_2001"
		;;

        "TeenageMutantNinjaTurtles(1987)")
                SHOWNAME="TeenageMutantNinjaTurtles_1987"
                ;;

        "TeenageMutantNinjaTurtles(2003)")
                SHOWNAME="TeenageMutantNinjaTurtles_2003"
                ;;
		
	"TeenageMutantNinjaTurtles(2012)")
		SHOWNAME="TeenageMutantNinjaTurtles_2012"
		;;

	"DoctorWho")
		SHOWNAME="DoctorWho_2005"
		;;
	"Flash")
		SHOWNAME="Flash_2014"
		;;
	"WhoseLineIsItAnyway")
		SHOWNAME="WhoseLineIsItAnyway_US"
		;;
	"Bob'sBurgers")
		SHOWNAME="BobsBurgers"
		;;
	"Parenthood")
		SHOWNAME="Parenthood_2010"
		;;
	"CSI-CrimeSceneInvestigation")
		SHOWNAME="CSI"
		;;
	"Castle(2009)")
		SHOWNAME="Castle"
		;;
	
#	"Grey'sAnatomy")
#		SHOWNAME="GreysAnatomy"
#		;;
esac

guidePath="/shares/incoming/epguides/"
localhtml="$guidePath/$SHOWNAME"".html"


#set new URL based on show name and if we have a local copy.
#create a local copy if we don't have one.
#if ! [ -e "$localhtml" ]; then
	URL="$URL"$SHOWNAME"/"
#	lynx -dump $URL >> $localhtml
#fi

#URL=$localhtml
#echo "$URL:  $Season-$Episode"
#get the line with the Episode title

if [ $Episode -lt 10 ]; then
 PageDump=`lynx -dump $URL |grep "$Season-$Episode" |grep -v "*" |grep -v "TVM" |head -1`
else
 PageDump=`lynx -dump $URL |grep "$Season-$Episode" |grep -v "*" |grep -v "TVM" |head -1`
fi

if [ "$PageDump" == "" ] && [ "${Episode:0:1}" == "0" ]; then
 PageDump=`lynx -dump $URL |grep "$Season- ${Episode:1:1}" |grep -v "*" |grep -v "TVM" |head -1`
 if [ "$PageDump" == "" ]; then
#echo -e "${yellow}--${Episode:1:1}--${NC}"
  PageDump=`lynx -dump $URL |grep "$Season-${Episode:1:1}" |grep -v "*" |grep -v "TVM" |head -1`
 fi
fi

echo -e "${red}$URL:${NC}"
echo -e "${red}$PageDump${NC}"

#clean out special characters
PageDump=`echo "$PageDump" | tr -d "'"`
PageDump=`echo "$PageDump" | tr -d "â€™"`
PageDump=`echo "$PageDump" | tr -d ","`
PageDump=`echo "$PageDump" | tr -d "?"`
PageDump=`echo "$PageDump" | tr -d "!"`
PageDump=`echo "$PageDump" | tr -d "."`
PageDump=`echo "${PageDump//\&amp\;/&}"`
PageDump=`echo "${PageDump//:/-}"`
PageDump=`echo "${PageDump//\\/-}"`
PageDump=`echo "${PageDump//\//-}"`



#PageDump=`echo "$PageDump" | tr -d ":00"`
#PageDump=`echo "${PageDump//AM/am}"`
#PageDump=`echo "${PageDump//PM/pm}"`

#put it in an array
arr=($PageDump)

#echo "===="
#echo $PageDump
#echo "==="

#search for a bracket to find the title in the line
COUNTER=0
TitlePos=$COUNTER
Title=""
while [ $COUNTER -lt ${#arr[@]} ]; do
        if [ $TitlePos -eq 0 ]; then
                pos=`expr index "${arr[$COUNTER]}" [`
                if [ $pos -gt 0 ]; then
                        TitlePos=$COUNTER
                else
                        COUNTER=$((COUNTER+1))
                fi
        else
                Title="$Title${arr[$COUNTER]}."
                COUNTER=$((COUNTER+1))
        fi
done

AirDate="${arr[$((TitlePos-3))]}-${arr[$((TitlePos-2))]}-${arr[$((TitlePos-1))]}"

#echo "AirDate is $AirDate"
#replace slashes in date with dashes
AirDate=${AirDate//\//-}

#echo "AirDate is $AirDate"

#cut off the leading brackets
pos=`expr index "$Title" ]`
Title=${Title:$pos}

#now cut off the end brackets if they exist
pos=`expr index "$Title" [`
if [ $pos -gt 0 ]; then
        pos=$((pos-1))
        Title=${Title:0:$pos}
fi

#remove commas from title
Title=${Title//\,//}


#tack on the Air date
	Title="$Title($AirDate)"
	echo "$originalFile"
	echo "Found a Title For $1 Season $2 Episode $3: $Title"
	#error checking
	if [ "$Title" == "()" ]; then
		echo $URL
		exit 1;
	fi
} ##end readTitleFromOnline

MoveFile() {
#	echo "mv" "$originalFile" "$1"
	`mv "$originalFile" "$1"`
	`chmod 755 "$1"`
} ## End MoveFile

CreateRSS() {

 newShowPath=${5:$pathlen:${#5}}
 newShowPath=${newShowPath// /%20}
 newShowPath="http://files.whosteppedingnome.com/video/tv/$newShowPath"

## remove the filename from the path
 newShowPath=${newShowPath%/*}
 newShowPath=$newShowPath/

## Put spaces back in the title
myTitle=${3//./ }

## update special characters
myTitle=`echo "$myTitle" |sed 's/\&/\&amp;/g'`

timeStamp=`date +"%a, %d %b %Y %T %Z"`

if [ "$doNotRSS" != "nofeed" ]; then

sed -i "10i\</item>\n" $RSS_Path
sed -i "10i\ <pubDate>$timeStamp</pubDate>" $RSS_Path
sed -i "10i\ <description>Ep $4: $myTitle -- Size:$FILESIZE </description>" $RSS_Path
sed -i "10i\ <link>$newShowPath</link>" $RSS_Path
sed -i "10i\ <title>$1 (Season $2)</title>" $RSS_Path
sed -i "10i\<item>" $RSS_Path
fi

## Database Interaction
QUERY="insert into rss_feeds.tv (title, season, link, episodenum, episodetitle, size, pubDate) values(\"$1\", \"$2\", \"$newShowPath\", \"$4\", \"$myTitle\", \"$FILESIZE\", \"$timeStamp\");"
`echo $QUERY |mysql`

} ## End CreateRSS

## Build the path
NewPath="$showpath"
for word in ${DirName[@]}; do
	NewPath="$NewPath$word\ "
done
len=${#NewPath}
let len=$len-2
NewPath=${NewPath:0:$len}
NewPath="$NewPath/Season\ $Season/"

echo ""
#echo ""
#echo "EP is $EP"
## Now check for existing show in that path
#echo "New Path is $NewPath"
NewPath=`echo ${NewPath//[\\\]/}`
EP="S$Season"
EP=$EP"E$EN"
#echo "New Path is $NewPath"
found=`find "$NewPath" -iname "*$EP*"`
if [ -z "$found" ]; then
	promptForTitle "$FoundShowName" "$Season" "$EN"
	MyNewFileName=`echo $FoundShowName |tr ' ' '.'`
	case "$MyNewFileName" in
		"CSI.-.Crime.Scene.Investigation")
			MyNewFileName="CSI"
			;;
	esac
	MyNewFileName=$MyNewFileName"."$EP"."$Title"."$extension
	NewPath=$NewPath$MyNewFileName
#echo "moving to $NewPath"
	CreateRSS "$FoundShowName" "$Season" "$Title" "$EN" "$NewPath"
	MoveFile "$NewPath"
else
	echo "Renaming $FoundShowName Season $Season Episode $EN ..."
		TitleYN=
		while [ "${TitleYN,,}" != "y" ] && [ "${TitleYN,,}" != "n" ]; do
			Title=`echo "$found" |awk -F"$EN" '{print $NF}'`
			Title=${Title:1:${#Title}}
			#let len=${#Title}-4
			len=$((${#Title}-4))
			Title=${Title:0:$len}
			Title=`echo $Title |tr '.' ' '`

			#read -p "Is the episode still called \"$Title\"? [Y/n/v]: " TitleYN
			TitleYN='n'
			if [ -z $TitleYN ]; then
				TitleYN='y'
			fi
			if [ "${TitleYN,,}" != "y" ] && [ "${TitleYN,,}" != "n" ]; then
				TitleYN=
			fi
		done
		if [ "${TitleYN,,}" == "n" ]; then
			Title=
			promptForTitle "$FoundShowName" "$Season" "$EN"
		fi
	       	MyNewFileName=`echo $FoundShowName |tr ' ' '.'`
	       	MyNewFileName=`echo $MyNewFileName |tr -d '('`
	       	MyNewFileName=`echo $MyNewFileName |tr -d ')'`
	       	MyNewFileName=$MyNewFileName"."$EP"."$Title"."$extension
	       	NewPath=$NewPath$MyNewFileName
		CreateRSS "$FoundShowName" "$Season" "$Title" "$EN" "$NewPath"
	        MoveFile "$NewPath"
fi
