#!/bin/bash

#A deluge-console command line interface
source $pLIB/colors
tmpfile=/tmp/dcdl1313.txt
cmd=$(which deluge-console)


function grab_current_info(){
#Get current info
if [ -a $tmpfile ]; then rm $tmpfile; fi
$cmd info >> $tmpfile
} #grab_current_info


function build_arrays(){
NumDownloads=$(cat $tmpfile |grep "ID: " |wc -l)

c=1;while [ $c -le $NumDownloads ]; do
 Names[$c]=$(cat $tmpfile |grep "Name:" |head -$c|tail -1|cut -d' ' -f2-)
 IDs[$c]=$(cat $tmpfile |grep "ID:" |head -$c|tail -1|awk '{print $2}')
 State[$c]=$(cat $tmpfile |grep "State:" |head -$c|tail -1|awk '{print $2}')
 Size[$c]=$(cat $tmpfile |grep "Size:" |head -$c|tail -1|awk '{print $2 " " $3 " " $4}')
 
 #These only matter if it is still downloading
  if [ "${State[$c]}" == "Seeding" ]; then
   Speed[$c]="0"
   ETA[$c]="0"
   Progress[$c]="0"
  else
   Speed[$c]=$(cat $tmpfile |grep "Down Speed:" |head -$c|tail -1|awk '{print $5 " " $6}')
   ETA[$c]=$(cat $tmpfile |grep "State:" |head -$c|tail -1|awk '{print $12 " " $13}')
   Progress[$c]=$(cat $tmpfile |grep -A6 ${IDs[$c]}|tail -1|awk '{print $2}')
  fi

c=$((c+1))
done
} #build_arrays

function display_size(){
 if [ "$2" == "Seeding" ]; then
	 slash=`expr index "$1" /`
	 stringZ="${1:$slash}\n"
 else
	 stringZ="$1"
 fi
 echo -en "$stringZ "
} #display_size


function display_current(){
seeds=0
dls=0

i=1;while [ $i -le $NumDownloads ]; do
echo "------------------------------------------------------------"
if [ "${State[$i]}" != "Seeding" ]; then
 dls=$((dls+1))
 echo -e "[${yellow}$i${NC}] - ${yellow}${Names[$i]}${NC}"
else 
 seeds=$((seeds+1))
 echo -e "[${green}$i${NC}] - ${blue}${Names[$i]}${NC}"
fi

display_size "${Size[$i]}" "${State[$i]}"

if [ "${State[$i]}" != "Seeding" ]; then
 echo "${Speed[$i]}"
 pd=`expr index "${Progress[$i]}" .`
 pd=$((pd-1))
 pC=$(echo "${Progress[$i]:0:$pd}")
 if [ $pC -lt 20 ]; then
   echo -en "${red}"
 elif [ $pC -lt 55 ]; then
   echo -en "${yellow}"
 else
   echo -en "${green}"
 fi
 echo -e "${Progress[$i]}${NC} -- ${ETA[$i]}"
fi
echo ""
i=$((i+1))
done
echo -e "${white}$((seeds+dls))${NC} Downloads - ${green}$seeds${NC} seeds, ${red}$dls${NC} downloading"
} #display_current

function remove_downloads(){
 sList=
 if [ "$1" == "seeding" ]; then
  c=1;while [ $c -le ${#State[@]} ]; do
   if [ "${State[$c]}" == "Seeding" ]; then
    if [ "$sList" == "" ]; then
	    sList="$c"
    else
	    sList="$sList,$c"
    fi
   fi
  c=$((c+1))
  done
 else 
	 sList="$1"
 fi
 if [ "$sList" == "" ]; then
	 echo -e "${green} No Seeds to remove${NC}"
 else
  #echo "sList is $sList"
  IFS=',' read -a seedlist <<< "$sList"
  for i in ${seedlist[@]}; do
 	 echo -e "Deleting ${yellow}${Names[$i]}${NC}..."
 	 $cmd del ${IDs[$i]}
  done
 fi
} #remove_downloads

##################################################
#### MAIN
##################################################

#clear
grab_current_info
build_arrays

if [ "$1" == "seeding" ]; then
 remove_downloads "seeding"
elif [ "$1" == "-d" ]; then
  if [ "$2" == "" ]; then
    remove_downloads "seeding"
  else
    remove_downloads "$2"
  fi
fi
grab_current_info
build_arrays
display_current

