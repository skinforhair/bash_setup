#!/bin/bash
for f in /root/.bin/lib/*; do source $f; done

### - Find local path (See /root/.bin/lib/.localize) ###
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do 
 DIR="$( cd -P "." && pwd )"
 SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
for f in $DIR/lib/functions/*; do source $f; done
source $DIR/lib/vars
TV="/shares/video/tv/"
FL=$(ls $TV)
IFS=$'\n' read -rd '' -a SHOWS <<< "$FL"
D=`date +"%Y-%m-%d"`
OUTPUT="CSV_Files/showinfo_$D"".csv"

if [ -f $OUTPUT ]; then 
 rm -rf $OUTPUT
fi

echo "Show,Gigabytes,Seasons,AveragePerSeason,currently_on_air" >> $OUTPUT

#echo "$FL"
c=0
while [ $c -lt ${#SHOWS[@]} ]; do
if [ "${SHOWS[$c]}" != "index.html" ] && [ "${SHOWS[$c]}" != "lost+found" ]; then
 echo "${SHOWS[$c]}"
 SHOWSIZE[$c]=$(du -sh "$TV${SHOWS[$c]}"|awk '{print $1}')
 NUMSEASONS[$c]=$(ls "$TV${SHOWS[$c]}"|grep "Season"|wc |awk '{print $1}')

 SZ=${SHOWSIZE[$c]}
 lastchar=${SZ:$((${#SZ}-1))}



 case "$lastchar" in
  "G") SZ=${SZ:0:$((${#SZ}-1))};;
  "M") SZ=${SZ:0:$((${#SZ}-1))}; SZ=$(echo "scale=3;$SZ/1000" |bc);;
  "K") SZ=0;;
 esac

if [ "${NUMSEASONS[$c]}" == "0" ]; then 
 NUMSEASONS[$c]=1
fi

SeasonAvg=$(echo "scale=3;$SZ/${NUMSEASONS[$c]}" |bc)

EXCEPTION=$(grep "${SHOWS[$c]}" $DIR/lib/epguides_exceptions.txt)
 if [ "$EXCEPTION" != "" ]; then
  SeasonsAvailable=${NUMSEASONS[$c]}
 else
  SN=$(cleanShowName "${SHOWS[$c]}")


#   Cquery="update tvShows set size_on_disk=${SZ}, seasons_owned=${NUMSEASONS[$c]}, seasons_aired=$SeasonsAvailable, currently_on_air=\"$OnAirStatus\" where showname=\"${SHOWS[$c]}\""


#download episode guide page
  epPage="epguides/pages/$SN.page"
  if [ ! -f $epPage ]; then
   PageDump=`lynx -width 1000 -dump http://epguides.com/$SN`
   echo "$PageDump" > $epPage
  fi
  SeasonsAvailable=$(cat epguides/pages/$SN.page |grep "â€¢ Season " |awk '{print $3}' |tail -1)
  if [ "$SeasonsAvailable" == "" ]; then
   SeasonsAvailable=$(cat epguides/pages/$SN.page |grep "Season " |awk '{print $2}' |tail -1)
  fi
  Cancelled=$(cat epguides/pages/$SN.page |grep "cancelled/ended")
  OnAir=$(cat epguides/pages/$SN.page |grep "current show")
 
  if [ "$Cancelled" == "$OnAir" ]; then
    OnAir=$(cat epguides/pages/$SN.page |grep "on hiatus")
    if [ "$OnAir" == "" ]; then
     OnAirStatus="UNKNOWN"
    else
     OnAirStatus="1"
    fi
  elif [ "$Cancelled" != "" ]; then
    OnAirStatus="0"
  else
    OnAirStatus="1"
  fi

   query="update tvShows set size_on_disk=${SZ}, seasons_owned=${NUMSEASONS[$c]}, seasons_aired=$SeasonsAvailable, currently_on_air=\"$OnAirStatus\" where showname=\"${SHOWS[$c]}\""
    #echo "$query"
   updateSQL=$(echo "$query"|mysql $dbOptions)
 fi
   echo "${SHOWS[$c]},${SZ},${NUMSEASONS[$c]},$SeasonAvg,$SeasonsAvailable,$OnAirStatus" >> $OUTPUT
fi
 c=$((c+1))
done
