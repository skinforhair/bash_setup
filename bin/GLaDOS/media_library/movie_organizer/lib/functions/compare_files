#!/bin/bash

function make_col(){
 if [ "$1" == "" ]; then
   numTabs=3
 else
   numTabs=$1
 fi
 count=0
 stringZ=
 while [ $count -lt $numTabs ]; do
  stringZ="$stringZ\t"
  count=$((count+1))
 done
echo -en "$stringZ"
} #END make_col

function compare_types() {
 case "$1" in
  "avi") scoreA=5;;
  "mkv") scoreA=20;;
  "mp4") scoreA=30;;
  *) scoreA=0;;
 esac
 case "$2" in
  "avi") scoreB=5;;
  "mkv") scoreB=20;;
  "mp4") scoreB=30;;
  *) scoreB=0;;
 esac

scoreT=$(($scoreB-$scoreA))


 if [ "$1" == "mp4" ]; then
     stringZ="$(make_col 1)${green}$1 ${NC}[$scoreA]"
     case "$2" in
 	"mp4") stringZ="$stringZ$(make_col)${green}$2${NC} [$scoreB]";;
 	"mkv") stringZ="$stringZ$(make_col)${yellow}$2${NC} [$scoreB]";;
 	"avi") stringZ="$stringZ$(make_col)${red}$2${NC} [$scoreB]";;
     esac
 fi

 if [ "$1" == "mkv" ]; then
     stringZ="$(make_col 1)${yellow}$1 ${NC}[$scoreA]"
     case "$2" in
        "mp4") stringZ="$stringZ$(make_col)${green}$2${NC} [$scoreB]";;
        "mkv") stringZ="$stringZ$(make_col)${green}$2${NC} [$scoreB]";;
        "avi") stringZ="$stringZ$(make_col)${red}$2${NC} [$scoreB]";;
     esac
 fi   

 if [ "$1" == "avi" ]; then
     stringZ="$(make_col 1)${red}$1 ${NC}[$scoreA]"
     case "$2" in
        "mp4") stringZ="$stringZ$(make_col)${green}$2${NC} [$scoreB]";;
        "mkv") stringZ="$stringZ$(make_col)${yellow}$2${NC} [$scoreB]";;
        "avi") stringZ="$stringZ$(make_col)${red}$2${NC} [$scoreB]";;
     esac
 fi   
 stringZ="$stringZ$(make_col 2)[$scoreT]"
 echo -e "$stringZ"	
} #END compare_types

function compare_size() {
minSize=750
allowance=171
 if [ $1 -lt $2 ]; then
  if [ "$3" == "0" ]; then
    echo -en "$(make_col 1)${green}$1 MB$(make_col)${red}$2 MB${NC}"
    diff=$(($2-$1))
    scoreS=$((diff/10))
     #if the new file is under a minimum size, cut the point value
     if [ $2 -lt $minSize ]; then
      scoreS=$(($scoreS/2))
     fi
    scoreS=$((0-$scoreS))
    echo -en "$(make_col 2)[$scoreS] ${red}(${NC}You will lose ${red}$diff${NC} MB${red})${NC}"
    if [ $2 -lt $minSize ]; then
      echo -en "(Under $minSize)"
    fi
   echo ""
  else
   #make allowace for Rifftrax
   echo -en "$(make_col 1)${green}$1 MB (+$allowance) $(make_col)${red}$2 MB${NC}"
    newSize=$(($2+$allowance))
    if [ $newSize -gt $1 ]; then
     diff=$(($2-$1))
     scoreS=0
    else
     diff=$(($2-$1))
     scoreS=$((diff/10))
    fi
     #if the new file is under a minimum size, cut the point value
     if [ $2 -lt $minSize ]; then
      scoreS=$(($scoreS/2))
     fi
     scoreS=$((0-$scoreS))
     echo -en "$(make_col 2)[$scoreS] ${red}(${NC}You will lose ${red}$diff${NC} MB${red})${NC}"
     if [ $2 -lt $minSize ]; then
       echo -en "(Under $minSize)"
     fi
    echo ""
  fi
 else
    echo -en "$(make_col 1)${red}$1 MB$(make_col)${green}$2 MB${NC}"
    diff=$(($1-$2))
    scoreS=$((diff/10))
#    scoreS=$(($scoreS*10))
    echo -e "$(make_col 2)[$scoreS] ${green}(${NC}You will gain ${green}$diff${NC} MB${green})${NC}"
 fi
 
} #END compare_size

function compare_quality() {
 scoreA=
 scoreB=

 case "$1" in
	"Unknown") scoreA=0;;
	"SD") scoreA=0;;
	"DVD") scoreA=20;;
	"720p") scoreA=40;;
	"1080p") scoreA=50;;
 esac
 case "$2" in
	"Unknown") scoreB=0;;
        "SD") scoreB=0;;
        "DVD") scoreB=20;;
        "720p") scoreB=40;;
        "1080p") scoreB=50;;
 esac

  scoreQ=$(($scoreB-$scoreA))
  score=$(($score+scoreD))
 
 if [ "$1" == "Unknown" ]; then
	stringZ="$(make_col 1)${red}$1 ${NC}[$scoreA]$(make_col)"
	case "$2" in
	  "SD") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
	  "DVD") stringZ="$stringZ${yellow}$2${NC} [$scoreB]";;
	  "720p") stringZ="$stringZ${Cyan}$2${NC} [$scoreB]";;
	  "1080p") stringZ="$stringZ${green}$2${NC} [$scoreB]";;
	esac
 fi

 if [ "$1" == "SD" ]; then
        stringZ="$(make_col 1)${red}$1 ${NC}[$scoreA]$(make_col)"
        case "$2" in
          "Unknown") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
          "SD") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
          "DVD") stringZ="$stringZ${yellow}$2${NC} [$scoreB]";;
          "720p") stringZ="$stringZ${Cyan}$2${NC} [$scoreB]";;
          "1080p") stringZ="$stringZ${green}$2${NC} [$scoreB]";;
        esac
 fi

 if [ "$1" == "DVD" ]; then
        stringZ="$(make_col 1)${yellow}$1 ${NC}[$scoreA]$(make_col)"
        case "$2" in
          "SD") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
          "Unknown") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
          "DVD") stringZ="$stringZ${yellow}$2${NC} [$scoreB]";;
          "720p") stringZ="$stringZ${Cyan}$2${NC} [$scoreB]";;
          "1080p") stringZ="$stringZ${green}$2${NC} [$scoreB]";;
        esac
 fi

 if [ "$1" == "720p" ]; then
        stringZ="$(make_col 1)${Cyan}$1 ${NC}[$scoreA]$(make_col)"
        case "$2" in
          "SD") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
          "DVD") stringZ="$stringZ${yellow}$2${NC} [$scoreB]";;
          "Unknown") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
          "720p") stringZ="$stringZ${Cyan}$2${NC} [$scoreB]";;
          "1080p") stringZ="$stringZ${green}$2${NC} [$scoreB]";;
        esac
 fi

 if [ "$1" == "1080p" ]; then
        stringZ="$(make_col 1)${green}$1 ${NC}[$scoreA]$(make_col)"
        case "$2" in
          "SD") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
          "DVD") stringZ="$stringZ${yellow}$2${NC} [$scoreB]";;
          "720p") stringZ="$stringZ${Cyan}$2${NC} [$scoreB]";;
          "1080p") stringZ="$stringZ${green}$2${NC} [$scoreB]";;
          "Unknown") stringZ="$stringZ${red}$2${NC} [$scoreB]";;
        esac
 fi

stringZ="$stringZ$(make_col 1)[$scoreQ]"

echo -e "$stringZ"
} #END compare_quality




function compare_files() {
#echo "$1 -- $2  -- $3"
# if [ "$2" == "$3" ]; then
#	echo -e "     ${green} $2 $(make_col) $3 ${NC}"
# else
 #Give a 150MB break for updating to RIFFTRAX
  
   case "$1" in
     "3" ) compare_types "$2" "$3" ;;
     "4" ) compare_size "$2" "$3" "$4" ;;
     "5" ) compare_quality "$2" "$3" ;;
   esac
# fi
 if [ "$scoreT" != "" ] && [ "$scoreS" != ""  ] && [ "$scoreQ" != "" ]; then
   #echo "t=$scoreT , s=$scoreS , q=$scoreQ $(($scoreT+$scoreS+$scoreQ))" 
   #scoreQ=$(($scoreQ*3))
   #scoreT=$(($scoreT*2))
   echo "Type=$scoreT , Size=$scoreS , Quality=$scoreQ --> score:$(($scoreT+$scoreS+$scoreQ))" 
   score=$(($scoreT+$scoreS+$scoreQ))
 fi
} #END compare_files

function check_same_file() {
 files_are_same="true"
 for i in {2..5}; do
   if [ "${searchTerms[$i]}" != "${dbTerms[$i]}" ]; then
    files_are_same="false"
   fi
 done
 echo "$files_are_same"
} #END check_same_file
