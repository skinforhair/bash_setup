#!/bin/bash
#
###############################
### TMDB movie scraper
### Author: Jeremiah Jackson
##############################

###############################################################
### This section sets the DIR variable to the current path
### allowing the script to run from anywhere on the filesystem
### as long as the directory structure within this app stays
### intact.
###############################################################
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#############################
### Libraries and Functions
#############################
source $DIR/lib/vars
for f in $DIR/lib/functions/*; do source $f; done
source $pLIB/colors

## Get Directories for Existing Shows
#if [ "$1" == "" ]; then
#	echo "No file specified. Exiting."
#	exit 0;
#fi

dl_flag=0;
trust_flag=0;
kodi_flag=0;
rss_flag=1;
copy_flag=0;
inputFile="NO_FILE"
while getopts ":f:htdkrlc" OPTION; do
 case $OPTION in
   h) tv_usage; exit 1;;
   f) inputFile=$OPTARG;;
   d) echo "set download flag";dl_flag=1;;
   t) trust_flag=1;;
   k) kodi_flag=1;;
   r) rss_flag=0;;
   l) kodi_flag=1;dl_flag=1;;
   c) copy_flag=1;;
 esac
done
if [ "$inputFile" == "NO_FILE" ] && [ "$1" != "" ]; then
 inputFile=$1
fi

if [ "$inputFile" == "NO_FILE" ]; then
	echo "No input file specified! Exiting"
	exit 1;
fi

showpath="/shares/video/tv/"
pathlen=${#showpath}
DirArray=($showpath*/)
if [ ! -f "$inputFile" ]; then
#	echo "Didn't find $inputFile!"
	inputFile=`find . -iname "$inputFile"*`
	if [ "$inputFile" == "" ]; then
		exit 1
	else
		if [ "${inputFile:0:2}" == "./" ]; then
			inputFile=${inputFile:2}
		fi
#	        echo "now $inputFile"
	fi
fi

originalFile=$inputFile

if [ -n "$3" ] && [ "$2" != "-f" ]; then
 FoundShowName=$3
else
 FoundShowName=
fi

if [ -n $4 ]; then
 Season=$4
else
 Season=
fi

EN=
Title=
FILESIZE=`du -h "$inputFile" | awk '{print $1;}'`"B"
quality=$(get_media_quality "$inputFile")
duration=$(get_media_length "$inputFile")
mType=$(get_media_type "$inputFile")


## RSS Path and Variables
RSS_Path="/shares/filesystem/apache/rss/tv/tv.rss"
#RSS_Path="$showpath/tv.xml"

## Remove leading path from Direcotry path
counter=0
while [ $counter -lt ${#DirArray[@]} ]; do
	word=${DirArray[$counter]}
	len=${#word}
	let len=$len-$pathlen
	let len=$len-1
	word=${word:$pathlen:$len}
#	echo "inserting $word at $counter"
	DirArray[$counter]=$word
	let counter=$counter+1
done


## function to get filename into appropriate format
formatFileName() {
fnew=$1
#change spaces to periods
fnew=`echo "$fnew" | sed 's/\ /./g'`

#change brackets and parens to periods
fnew=`echo "$fnew" |sed 's/\ \[/./g'`
fnew=`echo "$fnew" |sed 's/\]\ /./g'`

#remove commas, apsotrophes, quotes, and question marks
fnew=`echo "$fnew" |sed "s/'//g"`
fnew=`echo "$fnew" |sed "s/,//g"`
fnew=`echo "$fnew" |sed 's/"//g'`
fnew=`echo "$fnew" |sed "s/?//g"`

fnew=`echo "$fnew" |sed "s/\.-\././g"`
#echo "$fnew"

#change things like 4x02 to S04E02
fnew=`echo "$fnew" |sed -r "s#([1-9]{1,2}x)#S0\1#g"`
#echo "-$fnew"
fnew=`echo "$fnew" |sed -r "s#x([0-9]{2})#E\1#g"`
#echo "-- $fnew"
fnew=`echo "$fnew" |sed -r "s#S0([0-9]{2})#S\1#g"`
#echo "--- $fnew"
fnew=`echo "$fnew" |sed "s#0S#S#g"`
#echo "---- $fnew"
fnew=`echo "$fnew" |sed -r "s#.([0-9]{1,2}E[0-9]{1,2})#.S\1#g"`
#echo "----- $fnew"

inputFile=$fnew

#echo "inputFile is now $inputFile"

} # end formatFileName


#This should take the input file and rename for appropriate use
formatFileName "$inputFile"

## function to check if season folder exists
## Assuming that all seasons have leading zeros
checkSeasonFolder() {
 cs_showPath=$showpath$1"/"
 cs_seasonNum=$2
 cs_found=`find "$cs_showPath" -iname Season\ $cs_seasonNum`
 yesNo=
 if [ ! -n "$cs_found" ]; then
        echo "Season $cs_seasonNum not found. Existing season folders exist:"
        echo ""
        echo "   * $1 *"
#        echo `ls "$cs_showPath"`
	group=`find "$cs_showPath" -maxdepth 1 -type d ! -iname ".*"`
	echo "$group"
        echo ""
        echo ""
        while [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; do
        read -p "Would you like to create Season $2? [Y/n]: " yesNo
                if [ -z $yesNo ]; then
                        yesNo='y'
                fi
                if [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; then
                        yesNo=
                fi
        done
        if [ "${yesNo,,}" == "n" ]; then
                echo "Exiting..."
                exit 0
        else
                fullpath=`echo $1 |sed 's/\ /\\\ /g'`
                fullpath=$showpath$fullpath
		fullpath="$fullpath/Season\ $2"
		fullpath=`echo ${fullpath//[\\\]/}`
                `mkdir "$fullpath"`
        fi #if yesNo
 fi #if season doesn't exist

} #end checkSeasonFolder

sizeDisplay(){
 size="$FILESIZE"
 amt=`expr index "$size" B`
 amt=$((amt-1))
 GorM="${size:$((amt-1)):1}"
 number="${size:0:$((amt-1))}"
 echo -en "File size is "
 if [ "$GorM" == "G" ]; then
  echo -e "${red}$number GB ${NC}"
 else
  if [ $number -gt 600 ]; then
   echo -en "${red}"
  elif [ $number -gt 325 ]; then
   echo -en "${yellow}"
  else
   echo -en "${green}"
  fi  
  echo -en "$number "
  if [ "$GorM" == "M" ]; then
   echo -e "${green}MB${NC}"
  else
   echo -e "${yellow}$GorM""B${NC}"
  fi
 fi
} #sizeDisplay


## For each existing show, count the number of words
## in the title, then compare that many words from the
## filename.
checkShowName() {
## Parse out the file name
#filename=$(basename $1)
filename="$1"

extension="${filename##*.}"
filename="${filename%.*}"
IFS='.' read -a ShowNameArray <<< "$filename"


counter=0
while [ $counter -lt ${#DirArray[@]} ]; do
	IFS=' ' read -a DirName <<< "${DirArray[$counter]}"
	numwords=${#DirName[@]}
#	echo "${DirArray[$counter]} has $numwords words"
	loop=0
	while [ $loop -lt $numwords ]; do
		a=${ShowNameArray[$loop]}
		b=${DirName[$loop]}
	
		#special case names
		 #change (year) into year (remove parenthesis)
		if [ "${b:0:1}" == "(" ] && [ "${b:5}" == ")" ]; then
		  b="${b:1:4}"
		fi
		case "$b" in
			"Grey's")
				b="Greys"
				;;
			"It's")
				b="Its"
				;;
			"Bob's")
				b="Bobs"
				;;
			"Handmaid's")
				b="Handmaids"
				;;
			"Gently's")
				b="Gentlys"
				;;
			"Marvel's")
				b="Marvels"
				;;
			"(2005)")
				b="2005"
				;;
			"(2009)")
				b="2009"
				;;
			"(2012)")
				b="2012"
				;;

                        "(2016)")
                                b="2016"
                                ;;
                        "(2017)")
                                b="2017"
                                ;;
		esac


#		echo "Comparing $a to $b"

		if [ "$a" == "" ] || [ ${a,,} != ${b,,} ]; then
			break
		else
			let limit=$numwords-1
#echo -e "Checking ${yellow}${DirArray[$counter]}${NC}, counter is $counter, loop is $loop while limit is $limit"
			if [ "${a,,}" = "csi" ] || [ $loop = $limit ]; then
				FoundShowName=${DirArray[$counter]}
				break
			else
#		echo "Comparing $a to $b"
				let loop=$loop+1
			fi
		fi
	done	
	let counter=$counter+1
done


## Verify the Show name found
if [ "$FoundShowName" = "" ]; then
	MyNewName=
	##Replace these two lines
	echo "No Series found automatically."
	sizeDisplay 
	while [ -z "$MyNewName" ]; do
		read -p "Please enter the Series Name: " MyNewName
	done
	MyNewName=`echo "$MyNewName" |tr ' ' '.'`	
	echo checking "$MyNewName"
	checkShowName "$MyNewName"
#	FoundShowName="True Blood"
	##Replace
fi

} ## end checkShowName
if [ "$FoundShowName" = "" ]; then
	checkShowName "$inputFile"
fi
## We now have a verified folder to put the show in. Get the Season
## and episode information next.
PromptForEpInfo() {
	p_seasonNum=
	p_epNum=
	echo "Directory Listing for $FoundShowName:"
	echo ""
	echo `ls "$showpath$FoundShowName"`
#	find "$showpath$FoundShowName" -maxdepth 1 -type d
	echo "------"
	echo $inputFile 
	while ! [[ $p_seasonNum =~ $numbers ]]; do
		read -p "Please enter a season number: " p_seasonNum
        done
	 if [[ ${#p_seasonNum} -lt 2 ]] && [[ "$p_seasonNum" -lt "10" ]]; then
		p_seasonNum="0"$p_seasonNum
	 fi
	Season=$p_seasonNum
	
        read -p "Please enter an episode number: " p_epNum
         if [[ ${#p_epNum} -lt 2 ]] && [[ "$p_epNum" -lt "10" ]]; then
                p_epNum="0"$p_epNum
         fi
        EN=$p_epNum
#echo "Season $Season Episode $EN"
}


IFS=' ' read -a DirName <<< $FoundShowName
nextword=${#DirName[@]}
EP=${ShowNameArray[$nextword]}
if [ -n $EP ]; then
while [ "${EP:0:1}" != "S" ] && [ "${EP:0:1}" != "s" ]; do
#echo "$EP"
	if [[ $EP =~ $numbers ]]; then
		if [ ${#EP} = 3 ]; then
			EP="S0${EP:0:1}E${EP:1}"
		elif [ ${#EP} = 4 ]; then
		     if [ "${EP:0:2}" != "19" ] && [ "${EP:0:2}" != "20" ]; then
			EP="S${EP:0:2}E${EP:2}"
		     else
			nextword=$((nextword+1))
			EP=${ShowNameArray[$nextword]}
		     fi
		else
			PromptForEpInfo
			EP="S$Season"
                        EP=$EP"E$EN"
		fi
	else
	if [ $nextword -lt ${#ShowNameArray[@]} ]; then
		let nextword=$nextword+1
		EP=${ShowNameArray[$nextword]}
#		echo "Moved EP to $EP"
		if [ "$EP" = "" ]; then
			PromptForEpInfo
			EP="S$Season"
			EP=$EP"E$EN"
		fi
	else
		PromptForEpInfo
		break
	fi
	fi
done
	if [ "$EP" != "" ]; then
		Season=${EP:1:2}
		EN=${EP:4:2}
	fi
#echo "Season $Season, Episode $EN"
else
	PromptForEpInfo
fi

echo "Parsing $originalFile..."
echo ""
echo -en "Checking ${yellow}$FoundShowName ${NC} Season ${blue}$Season${NC} ... "
sizeDisplay
checkSeasonFolder "$FoundShowName" "$Season"
## We now have Show info, get the title
promptForTitle() {
	SHOWNAME=$1
	#Special-case formatting for some shows
	case "$SHOWNAME" in
		"Greys Anatomy")
			SHOWNAME="Grey's Anatomy"
			;;
		"Bobs Burgers")
			SHOWNAME="Bob's Burgers"
			;;
	        "The Handmaids Tale")
			SHOWNAME="The Handmaid's Tale"
			;;
		"Dirk Gentlys Holistic Detective Agency (2016)")
			SHOWNAME="Dirk Gently's Holistic Detective Agency (2016)"
			;;
		"Marvels Inhumans")
			SHOWNAME="Marvel's Inhumans"
			;;
			
	esac

	season=$2
	leadin=${season:0:1}
	if [ "$leadin" == "0" ]; then
		season=${season:1:1}
	fi
	readTitleFromOnline "$SHOWNAME" "$season" "$3"
	if [ "$trust_flag" == "1" ]; then
		yesNo="y"
	else
		yesNo=
	fi
        while [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; do
                read -p "Use this Title? ([Y]es/[n]o/[v]iew Directory): " yesNo
                        if [ -z $yesNo ]; then
                        yesNo='y'
                fi
                if [ "${yesNo,,}" == "v" ]; then
                        echo " Here is a listing of episodes:"
                        echo `ls "$NewPath"`
                        echo ""
                fi
                if [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; then
                        yesNo=
                fi
        done

        if [ "${yesNo,,}" == "n" ]; then
		TitleToo=
		if [ "$4" != "" ]; then
			echo "using $4 as the title.."
			TitleToo=$4
		else
		while [ -z "$TitleToo" ]; do
			read -p "Please enter the Title of $SHOWNAME Season $2 Episode $3: " TitleToo
			#read -i "$Title " -e TitleToo

			if [ -z "$TitleToo" ]; then
				TitleToo=$Title
			fi	
		  	TitleToo=`echo $TitleToo |tr ' ' '.'`	
			TitleToo=$TitleToo".("$AirDate")"
		done
		fi
		Title=$TitleToo
	fi
	

} ##end promptForTitle

readTitleFromOnline(){
SHOWNAME=$1
Season=$2
Episode=$3
URL="http://epguides.com/"
PAGES="$DIR/epguides/pages/"
#external function to get Page Dump of episode list
if [ "$SHOWNAME" == "Mythbusters" ]; then
  Season=$((Season+2002))
fi
#echo "season is $Season"
#echo "episode is $Episode"
PageDump=$(EpGuideName_local "$1" "$Season" "$3")

#put it in an array
arr=($PageDump)

#echo "===="
#echo $PageDump
#echo "==="

#search for a bracket to find the title in the line
COUNTER=0
TitlePos=$COUNTER
Title=""
while [ $COUNTER -lt ${#arr[@]} ]; do
#echo "arrCounter $COUNTER is ${arr[$COUNTER]}"
        if [ $TitlePos -eq 0 ]; then
                pos=`expr index "${arr[$COUNTER]}" [`
                if [ $pos -gt 0 ]; then
                        TitlePos=$COUNTER
                else
                        COUNTER=$((COUNTER+1))
                fi
        else
                Title="$Title${arr[$COUNTER]}."
                COUNTER=$((COUNTER+1))
        fi
done
if [ "$Title" == "" ]; then
 COUNTER=5
 TitlePos=5
 while [ $COUNTER -lt ${#arr[@]} ]; do
 #echo "arrCounter $COUNTER is ${arr[$COUNTER]}"
     Title="$Title${arr[$COUNTER]}."
     COUNTER=$((COUNTER+1))
 done
fi
if [ "$Title" == "" ]; then
  echo "NO TITLE FOUND!"
  exit 1
fi
#echo "Title is $Title"
#echo "line is 521"
AirDate="${arr[$((TitlePos-3))]}-${arr[$((TitlePos-2))]}-${arr[$((TitlePos-1))]}"
#echo "AirDate is $AirDate"
if [ ${#AirDate} -gt 9 ]; then
  AirDate="${arr[$((TitlePos-1))]}"
  #echo "AirDate is $AirDate"
fi
#replace slashes in date with dashes
AirDate=${AirDate//\//-}

#echo "AirDate is $AirDate"
if [ "$AirDate" != "PAGE:" ]; then
echo "Checking epguides.com page..."
#cut off the leading brackets
pos=`expr index "$Title" ]`
Title=${Title:$pos}

#echo "Title is $Title"

#now cut off the end brackets if they exist
pos=`expr index "$Title" [`
if [ $pos -gt 0 ]; then
        pos=$((pos-1))
        Title=${Title:0:$pos}
fi

#remove commas from title
Title=${Title//\,//}
#remove quotes from title
Title=${Title//\"/}
#remove colons from title
Title=${Title//\:/}
#remove slashes from title
Title=${Title//\//-}

else
 echo "Pulling from local json..."
line=$(get_next_episode_from_json "$1" "$2" "$3")
#echo "line is $line"
  AirDate=$(echo "$line" |awk '{print $3"-"$4"-"$5}')
  Title=$(echo "$line" |awk '{for(i=6;i<NF;i++)printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}' |tr ' ' '.')
fi #if AirDate != PAGE:

if [ "$Title" == "FAIL" ]; then
  echo "No episode name found in epguides or json for $1. exiting."
  exit 1;
fi

#tack on the Air date
 if [ "${Title:$((${#Title}-1))}" == "." ];then 
   Title="${Title:0:$((${#Title}-1))}"
 fi
 t="$Title"
 Title="$Title.($AirDate)"
 echo -e "${yellow}$1 ${NC}Season ${blue}$2 ${NC}Episode ${white}$3${NC}: (${yellow}$AirDate${NC}) - ${white}$t${NC}"
   #error checking
     if [ "$Title" == "()" ]; then
           echo $URL
           exit 1;
     fi
} ##end readTitleFromOnline

MoveFile() {
#	echo "mv" "$originalFile" "$1"
        if [ "$copy_flag" == "1" ]; then
          `cp -f "$originalFile" "$1"`
        else
	`mv "$originalFile" "$1"`
	fi
	`chmod 755 "$1"`
} ## End MoveFile

CreateRSS() {

 newShowPath=${5:$pathlen:${#5}}
 newShowPath=${newShowPath// /%20}
 newShowPath="http://files.whosteppedingnome.com/video/tv/$newShowPath"

## remove the filename from the path
 newShowPath=${newShowPath%/*}
 newShowPath=$newShowPath/

## Put spaces back in the title
myTitle=${3//./ }

## update special characters
myTitle=`echo "$myTitle" |sed 's/\&/\&amp;/g'`

timeStamp=`date +"%a, %d %b %Y %T %Z"`

if [ "$rss_flag" != "0" ]; then

sed -i "10i\</item>\n" $RSS_Path
sed -i "10i\ <pubDate>$timeStamp</pubDate>" $RSS_Path
sed -i "10i\ <description>Ep $4: $myTitle -- Size:$FILESIZE </description>" $RSS_Path
sed -i "10i\ <link>$newShowPath</link>" $RSS_Path
sed -i "10i\ <title>$1 (Season $2)</title>" $RSS_Path
sed -i "10i\<item>" $RSS_Path
fi

## Database Interaction
QUERY="insert into rss_feeds.tv (title, season, link, episodenum, episodetitle, size, pubDate) values(\"$1\", \"$2\", \"$newShowPath\", \"$4\", \"$myTitle\", \"$FILESIZE\", \"$timeStamp\");"
`echo $QUERY |mysql`

} ## End CreateRSS

## Build the path
NewPath="$showpath"
for word in ${DirName[@]}; do
	NewPath="$NewPath$word\ "
done
len=${#NewPath}
let len=$len-2
NewPath=${NewPath:0:$len}
NewPath="$NewPath/Season\ $Season/"

echo ""
#echo ""
#echo "EP is $EP"
## Now check for existing show in that path
#echo "New Path is $NewPath"
NewPath=`echo ${NewPath//[\\\]/}`
EP="S$Season"
EP=$EP"E$EN"
#echo "New Path is $NewPath"
found=`find "$NewPath" -iname "*$EP*" |grep -v srt`
if [ -z "$found" ]; then
	promptForTitle "$FoundShowName" "$Season" "$EN"
	MyNewFileName=`echo $FoundShowName |tr ' ' '.'`
	case "$MyNewFileName" in
		"CSI.-.Crime.Scene.Investigation")
			MyNewFileName="CSI"
			;;
	esac
	MyNewFileName=$MyNewFileName"."$EP"."$Title"."$extension
	NewPath=$NewPath$MyNewFileName
#echo "moving to $NewPath"
	CreateRSS "$FoundShowName" "$Season" "$Title" "$EN" "$NewPath"
	UpdateTVFeedDB "$FoundShowName" "$Season" "$EN" "$Title" "$FILESIZE" "$quality" "$duration" "$mType"
	MoveFile "$NewPath"
else
	echo "$FoundShowName Season $Season Episode $EN already exists!"
        #get original file name
	OrFN=$(ls "$showpath$FoundShowName/Season $Season" |grep "E$EN")
	if [ $trust_flag == 1 ]; then
  	 yesNo="y"
        else
         yesNo=
        fi
	while [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; do
		echo "Would you like to replace"
		echo -e "   -    ${Cyan}$OrFN${NC} (${red}`du -h \"$found\" | awk '{print $1;}'`${NC})"
		echo " with"
		echo -e "   -    ${ICyan}$1${NC} (${IRed}`du -h \"$1\" |awk '{print $1}'`${NC})"
		read -p "([Y]es/[n]o/[v]iew Directory): " yesNo
			if [ -z $yesNo ]; then
                        yesNo='y'
                fi
	        if [ "${yesNo,,}" == "v" ]; then
        	        echo " Here is a listing of episodes:"
                	echo `ls "$NewPath"`
	                echo ""
        	fi
                if [ "${yesNo,,}" != "y" ] && [ "${yesNo,,}" != "n" ]; then
                        yesNo=
                fi
	done

        if [ "${yesNo,,}" == "n" ]; then
                echo "Exiting..."
                exit 0
        else
#		TitleYN=
#		while [ "${TitleYN,,}" != "y" ] && [ "${TitleYN,,}" != "n" ]; do
Title=`echo "$found" |awk -F"$EN" '{print $NF}'`
Title=${Title:1:${#Title}}
let len=${#Title}-4
Title=${Title:0:$len}
Title=`echo $Title |tr '.' ' '`

#			read -p "Is the episode still called \"$Title\"? [Y/n/v]: " TitleYN
#			if [ -z $TitleYN ]; then
#				TitleYN='y'
#			fi
#		        if [ "${TitleYN,,}" == "v" ]; then
#                		echo " Here is a listing of episodes:"
#		                echo `ls "$NewPath"`
#		                echo ""
#		        fi
#			if [ "${TitleYN,,}" != "y" ] && [ "${TitleYN,,}" != "n" ]; then
#				TitleYN=
#			fi
#		done
#		if [ "${TitleYN,,}" == "n" ]; then
#			Title=
			promptForTitle "$FoundShowName" "$Season" "$EN" "$Title"
#		fi
	       	MyNewFileName=`echo $FoundShowName |tr ' ' '.'`
	       	MyNewFileName=$MyNewFileName"."$EP"."$Title"."$extension
	        MyNewFileName=`echo $MyNewFileName |tr ' ' '.'`
	       	NewPath=$NewPath$MyNewFileName
		
		CreateRSS "$FoundShowName" "$Season" "$Title" "$EN" "$NewPath"
		UpdateTVFeedDB "$FoundShowName" "$Season" "$EN" "$Title" "$FILESIZE" "$quality" "$duration" "$mType"
	        MoveFile "$NewPath"
                if [ "$found" != "$NewPath" ]; then
	          if [ "$copy_flag" == "0" ]; then
                   echo -e "${red}Deleting $found${NC}"
                   rm "$found"
		  fi
                  #echo "$found"
                  #echo "$NewPath"
                else
                  echo -e "${yellow}Overwriting $found${NC}"
                fi
        fi #if yesNo

fi

if [ "$dl_flag" == "1" ]; then
 $DIR/epguides/next_episode
fi

if [ "$kodi_flag" == "1" ]; then
 /root/.bin/local/update_kodi_library
fi

clean_thumbs "$originalFile" "$FILESIZE" "$quality" "$duration" "$mType"
