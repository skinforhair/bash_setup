#!/bin/bash

###############################################################
### This section sets the DIR variable to the current path
### allowing the script to run from anywhere on the filesystem
### as long as the directory structure within this app stays
### intact.
###############################################################
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#############################
### Libraries and Functions
#############################
source $DIR/lib/vars
for f in $DIR/lib/functions/*; do source $f; done
OIFS=$IFS

searchTerms=
json_array=
db_array=


#read -ra var_id <<< $(echo "select local_path from movies" |mysql $dbOptions)
#for i in "${var_id[@]}"; 
#    do
##results=$(mysql -h $db_host -u $db_user -p$db_pass $db -sse "select count(*)from $i")
#echo "$i"
#done


#######################################################
### Parse the filename and search online for the movie
### Prompt the user for verification
#######################################################
if ! [ -a "$1" ]; then
  if [ -a "$1mp4" ]; then
        checkName="$1mp4"
  elif [ -a "$1m4v" ]; then
        checkName="$1m4v"
  elif [ -a "$1avi" ]; then
        checkName="$1avi"
  elif [ -a "$1mkv" ]; then
        checkName="$1mkv"
  else
        checkName="$1"
  fi
else
  checkName="$1"
fi


sTerms=$(parseFilename "$checkName")
#echo -e "${yellow} $sTerms ${NC}"
IFS='|' read -a searchTerms <<< "$sTerms"
#info "${searchTerms[0]}  -- ${searchTerms[1]}"



#dbID=$(local_id "${searchTerms[0]}" "${searchTerms[1]}")
dbID=${searchTerms[0]}
#echo "dbid is $dbID from ${searchTerms[0]} - ${searchTerms[1]}"

if [ "$dbID" != "" ]; then
 grab_all_from_db "$dbID"

#for i in {1..23}; do 
#echo "$i ${searchTerms[$i]}"
#echo "-----"
#done

tyq="${searchTerms[0]}.""${searchTerms[1]}.""${searchTerms[4]}"
tyq=$(echo "$tyq" |sed "s;\ ;.;g")
tyq=$(echo "$tyq" |sed "s;:;-;g")
#echo "$tyq"
newfile=$(build_nfo "$tyq")
echo "newfile is $newfile"
oldfile="${searchTerms[21]}/$tyq.nfo"

NFO_has_changed=$(diff "$oldfile" "$newfile")
 if [ "$NFO_has_changed" != "" ]; then
  #echo "mv \"$newfile\" \"$oldfile\""
#  mv "$newfile" "$oldfile"
  echo -e "${green}NFO UPDATED${NC}"
 else
  echo -e "${gray}NFO Hasn't Changed.${NC}-- deleting $newfile"
  #echo "rm $newfile"
#  rm "$newfile"
 fi

else
 echo "NOT FOUND. check get_local_id \"${searchTerms[0]}\" \"${searchTerms[1]}\""
fi



