#!/bin/bash

get_episode_names(){
SHOWNAME=$1
Season=$2
Episode=$3
Title=
AirDate=

 echo -e "${white}Pulling from local json...${black}get_episode_names${NC}"
#check freshness of the json file. if more than 3 days old, refresh it.
episodeJSON="/shares/video/tv/$SHOWNAME/.showdata/episodeinfo.json"
#echo -e "checking ${yellow}$SHOWNAME${NC}  .. ${red}$episodeJSON${NC}"
#find "$episodeJSON" -mmin +4320 -exec $DIR/scripts/SeriesUpdate "$SHOWNAME" \;

if [ "$Season" == "0" ]; then
 Multi=0
 dataType="x"
 while [ "${dataType,,}" != "d" ] && [ "${dataType,,}" != "t" ]; do
  #echo en "Required: Air [D]ate, or [T]itle: "
  read -p "Required: Air [D]ate, or [T]itle: " dataType
 done
 
 if [ "${dataType,,}" == "d" ]; then
  read -p "Please enter an air date YYYY-MM-DD: " dataVal
 else
  read -p "Please enter an exact Title to search for: " dataVal
 fi #if dataType
  line=$(get_next_episode_from_json "$SHOWNAME" "$Season" "$dataType" "$dataVal")
else 
  Multi="$4"
  line=$(get_next_episode_from_json "$SHOWNAME" "$Season" "$Episode")
fi #if Special (Season == 0)

#echo "line is $line"
 LocalAirDate=$(echo "$line" |awk '{print $3"-"$4"-"$5}')
 LocalTitle=$(echo "$line" |awk '{for(i=6;i<NF;i++)printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}' |tr ' ' '.')


#echo "Multi is $Multi"
if [ $Multi -gt 1 ]; then
 c=2
 e=$Episode
 while [ $c -le $Multi ]; do
  c=$((c+1))
  e=$((e+1))
  l2=$(get_next_episode_from_json "$1" "$2" "$e")
  lt2=$(echo "$l2" |awk '{for(i=6;i<NF;i++)printf"%s",$i OFS;if(NF)printf"%s",$NF;printf ORS}' |tr ' ' '.')
  LocalTitle="$LocalTitle-$lt2"
 done
fi 



#echo "LocalTitle is $LocalTitle"
#remove commas from title
LocalTitle=${LocalTitle//\,//}
#remove quotes from title
LocalTitle=${LocalTitle//\"/}
LocalTitle=${LocalTitle//\'/}
LocalTitle=${LocalTitle//\â€™/}
#remove colons from title
LocalTitle=${LocalTitle//\:/}
#remove slashes from title
LocalTitle=${LocalTitle//\//-}
LocalTitle=$(echo "$LocalTitle" |sed 's;\.\.;\.;g')
#echo "LocalTitle is $LocalTitle"
if [ "${LocalTitle:0:4}" == "FAIL" ] || [ "${LocalTitle:0:4}" == "null" ]; then
  showdata="$tvPath$1/.showdata/"
  episode=$(find "$showdata" -mtime +10 |grep episode)
  if [ "$episode" != "" ]; then
   echo -e "${red}No episode name found.${NC} Refreshing ${red}$1${NC} and Exiting."
   $DIR/scripts/SeriesUpdate "$1"
  else
   echo -e "${red}ERROR.${NC} No episode name found in epguides or json for $1. exiting."
   echo "Try running $0 -m to manually override this."
  fi
  exit 1;
else

#tack on the Air date
 if [ "${LocalTitle:$((${#LocalTitle}-1))}" == "." ];then
   LocalTitle="${LocalTitle:0:$((${#LocalTitle}-1))}"
 fi
 t="$LocalTitle"
 LocalTitle="$LocalTitle.($LocalAirDate)"
 if [ "$Season" == "0" ]; then
   echo -en "${yellow}$1 ${NC}Season ${blue}$3 ${NC}${white}Special"
 else
   echo -en "${yellow}$1 ${NC}Season ${blue}$2 ${NC}Episode ${white}$3"
 fi
  if [ $Multi -gt 1 ]; then
   cntr=1
   e2=$(($3+1))
   while [ $cntr -lt $Multi ]; do
     if [ $e2 -lt 10 ] && [ ${#e2} -lt 2 ]; then
      e2="0$e2"
     fi
     echo -en "${NC}-${white}$e2"
     cntr=$((cntr+1))
   done
  fi #if Multi
 echo -e "${NC}: (${yellow}$LocalAirDate${NC}) - ${white}$t${NC}"
Title="$LocalTitle"
AirDate="$LocalAirDate"
fi
} ##end get_episode_names

