#!/bin/bash
##############################
### refresh_nfo - writes a
### new .nfo file from db
### Author: Jeremiah Jackson
##############################

###############################################################
### This section sets the DIR variable to the current path
### allowing the script to run from anywhere on the filesystem
### as long as the directory structure within this app stays
### intact.
###############################################################
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#############################
### Libraries and Functions
#############################
source $DIR/lib/vars
source $pLIB/colors
for f in $DIR/lib/functions/*; do source $f; done
OIFS=$IFS
DateStamp=`date +"%m-%d-%y_%H:%m:%s"`
LogFile="$DIR/logs/NFO_$DateStamp"".log"
maxID=$(echo "select max(id) as ID from $movieTable"|mysql $dbOptions)
numMovs=$(echo "select count(*) from $movieTable" |mysql $dbOptions)

if [ "$1" == "" ]; then
	i=0
else
	i="$1"
fi

m="$i"
perc=$(bc -l <<< $numMovs/100)
Point=`expr index "$perc" .`
Perc=${perc:0:$((Point-1))}
percentDone=0
nextPerc=$Perc


while [ $i -lt $maxID ]; do
 grab_all_from_db $i

if false; then
  if [ $i -gt $nextPerc ]; then
	percentDone=$((percentDone+1))
	nextPerc=$((nextPerc+Perc))
	echo -ne "$percentDone %"\\r
  fi
fi

 echo -ne "${yellow}$m${NC}   / ${red}$numMovs${NC} - ID: ${yellow}$i${NC}"\\r

 if [ "${searchTerms[0]}" != "" ]; then
  myfilename=$i"_nfo"
  newNFOfile=$(build_nfo "$myfilename")
   stringZ="${searchTerms[0]}.${searchTerms[1]}.${searchTerms[4]}.nfo"
   stringZ=`echo "$stringZ" |sed 's;\ ;.;g'`
   stringZ=`echo "$stringZ" |sed 's;:;-;g'`
   stringZ=`echo "$stringZ" |sed 's;\/;;g'`
	lc=${#searchTerms[21]}	
	lc=${searchTerms[21]:$((lc-1)):1}
   if [ "$lc" == "/" ]; then
     stringZ="${searchTerms[21]}$stringZ"
   else
     stringZ="${searchTerms[21]}/$stringZ"
   fi
  
  if [ ! -f "$stringZ" ] ; then
	echo " ------- " |tee $LogFile
	echo "FAILED at $i" |tee $LogFile
	echo -e "${yellow}${searchTerms[21]}${NC}/${red}$stringZ${NC}"
	echo "${searchTerms[21]}/$stringZ" >> $LogFile

	#echo "$stringZ"
	exit 1
  fi

  isDiff=`diff "$DIR/temp/$myfilename.nfo" "$stringZ"`
   if [ "$isDiff" != "" ]; then
 	echo "updating ${searchTerms[0]} (${searchTerms[1]})..." >> $LogFile
 	mv "$DIR/temp/$myfilename.nfo" "$stringZ"
   else
 #	echo "no change on ${searchTerms[0]} (${searchTerms[1]})"
 	rm "$DIR/temp/$myfilename.nfo"
   fi
 
 m=$((m+1))
 fi
 i=$((i+1))
done
