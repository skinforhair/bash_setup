#!/bin/bash
for f in $pLIB/*; do if [ -f $f ]; then source $f;fi; done

DIR="$pBIN/GLaDOS/media_library/tv_organizer/"
token_file="$DIR/lib/thetvdb/current_token"
if [ "$(cat $token_file)" == "" ]; then
 $DIR/lib/thetvdb/generate_token
fi
token=$(cat ${token_file})


for f in $DIR/lib/functions/*; do source $f; done
source $DIR/lib/vars

FL=$(ls $tvPath)
IFS=$'\n' read -rd '' -a SHOWS <<< "$FL"
D=`date +"%Y-%m-%d"`
EXCEPTION_LIST=$DIR/lib/newshow_exceptions.txt
NEWSHOLIST=
count=0
selection=
NEWSHOWNAME=
update=0
SeasonsAvailable=1
#currently_on_air=1
#active_download=1
 
case "$1" in
 "u" | "update" | "Update" | "U" | "-u" | "-U") update=1;;
esac


function get_new_show_names(){
## Populate the new show array, ignoring shows in the exception list
echo "Scanning for new shows..."
for i in "${SHOWS[@]}"; do
 query="select id from tvShows where showname=\"$i\""
 EXCEPTION=$(grep "$i" $EXCEPTION_LIST)
  if [ "$EXCEPTION" == "" ]; then
   ID=$(echo "$query"|mysql $dbOptions)
   if [ "$update" == "1" ]; then
    if [ "$ID" != "" ]; then
     count=$((count+1))
     NEWSHOWLIST[$count]="$i"
    fi #if id found
   else
    if [ "$ID" == "" ]; then
     count=$((count+1))
     NEWSHOWLIST[$count]="$i"
    fi #if id found
   fi #if update
  fi #if exception==""
done

## if we found new shows, list them
if [ ${#NEWSHOWLIST[@]} -ne 0 ]; then
 clear
 while [ "$selection" == "" ]; do
   for i in "${!NEWSHOWLIST[@]}"; do
    printf "%s\t%s\n" "$i" "${NEWSHOWLIST[$i]}"
   done
   #after listing found shows, give other options
   echo -e "n\t[N]ew show"
   echo -e "c\t[C]ancel"
   echo -en "Please choose an option : "
   read selection
   if ! [[ $selection =~ $numbers ]] ; then
    case "$selection" in 
      [nN] ) ReadInNewShowName;;
      [cC] ) exit 0;;
      *) clear;echo -e "${yellow}Invalid Selection ${red}[ $selection ]${NC}";selection="";;
    esac
   else
    if [ "${NEWSHOWLIST[$selection]}" == "" ]; then
         clear;echo -e "${yellow}Invalid Selection ${red}[ $selection ]${NC}";selection=""
    fi
   fi   
 done
#echo "selection was $selection"
fi

## If the show was selected from list, use it, otherwise, prompt for it.
while [ "$NEWSHOWNAME" == "" ]; do
 if [ "$selection" != "" ]; then
   NEWSHOWNAME=${NEWSHOWLIST[$selection]}
 else
   clear
   echo "No new shows found."
   echo -en "Enter new Show Name: "
   read NEWSHOWNAME
 fi
done
} #get_new_show_names


function download_epguides(){
#download episode guide page
 SN=$(cleanShowName "$NEWSHOWNAME")
  epPage="$DIR/epguides/pages/$SN.page"
  if [ ! -f $epPage ]; then
   PageDump=`lynx -width 1000 -dump $EPGUIDES/$SN`
   echo "Grabbing data from epguides.com/$SN ..."
   echo "$PageDump" > $epPage
  fi

checkline=$(head -n 1 $epPage)
 if ! [ -s $epPage ] || [ "$checkline" == "The page cannot be found" ]; then
   echo "Cannot read $EPGUIDES/$SN"
   rm $epPage
   YesNo "Continue?" "n"
   if [ "$?" == "0" ]; then
     echo "Quitting!";exit 0
     rm -f $epPage
   fi
 else
  echo "Downloaded episode info to $epPage"
 fi
} #download_epguides

function grab_from_tvdb(){
#convert spaces in showname to %20
showname=$(echo "$NEWSHOWNAME" |sed 's;\ ;%20;g')
echo -e "Searching for ${yellow}$showname${NC}.."
searchTVjson=$(curl -X GET --header "Accept: application/json" --header "Authorization: Bearer ${token}" "https://api.thetvdb.com/search/series?name=${showname}")
sresult=$(echo "$searchTVjson" |awk '{print $2$3}')
sresult="${sresult:2}"
sresult="${sresult:0:$((${#sresult}-1))}"

 if [ "$sresult" == "Notauthorized" ] || [ "$searchTVjson" == "" ]; then
   echo "$sresult"
   echo "curl command was:"
   echo "curl -X GET --header \"Accept: application/json\" --header \"Authorization: Bearer ${token}\" \"https://api.thetvdb.com/search/series?name=${showname}\""
   echo ""
   echo -e "Try running ${yellow}$DIR/lib/thetvdb/generate_token${NC}"
   exit 0
 fi

tvdbID=`echo "$searchTVjson" |jq '.data[]' |jq '.id' |sed 's/\"//g'`
firstAired=`echo "$searchTVjson" |jq '.data[]' |jq '.firstAired' |sed 's/\"//g'`
seriesName=`echo "$searchTVjson" |jq '.data[]' |jq '.seriesName' |sed 's/\"//g'`
seriesStatus=`echo "$searchTVjson" |jq '.data[]' |jq '.status' |sed 's/\"//g'`

nResults=$(echo "$tvdbID" |wc -l)
clear
if [ $nResults -lt 1 ]; then
 echo "No results!"
elif [ $nResults -gt 1 ]; then
 echo "Show $showname has multiple results found!!"
 IFS=$'\n' a=(${firstAired[0]})
 IFS=$'\n' s=(${seriesStatus[0]})
 IFS=$'\n' n=(${seriesName[0]})
 IFS=$'\n' y=(${tvdbID[0]})
 tvdbID=
 while [ "$tvdbID" == "" ]; do
 c=1
 echo -e "N: tvdbID\tName\t\tFirst Aired\tStatus"
 echo "----------------------------------------"
 echo "0: CANCEL OPERATION"
  while [ $c -le ${#y[@]} ]; do
   d=$((c-1))
   echo -e "$c: ${y[$d]}\t${n[$d]}\t\t${a[$d]}\t${s[$d]}"
   c=$((c+1))
  done #while c -le array

  read -p "Please enter an ID: " inputID
  if [ "$inputID" == "0" ]; then
    exit 1
  else
    NEWSHOWNAME=${n[$((inputID-1))]}
    tvdbID="${y[$((inputID-1))]}"
    seriesStatus="${s[$((inputID-1))]}"
    firstAired="${a[$((inputID-1))]}"
  fi
 done
fi

    if [ "$seriesStatus" == "Continuing" ]; then
      currently_on_air="1"
    else
      currently_on_air="0"
    fi  


if [ "$update" == "1" ]; then
 MSHOWNAME=$(echo "$NEWSHOWNAME" |sed "s;';'';g")
 active_download=$(echo "select active_download from VideoLibrary.tvShows where showname='$MSHOWNAME'" |mysql -srN)

 seriesinfo="$tvPath/$NEWSHOWNAME/.showdata/seriesinfo.json"
 episodeinfo="$tvPath/$NEWSHOWNAME/.showdata/episodeinfo.json"
#if The show already exists, look for local series and episodes json files
 if [ ! -f "$seriesinfo" ]; then
  echo "creating $seriesinfo ..."
  mkdir -p "$tvPath/$NEWSHOWNAME/.showdata"
  echo -e "${red}Downloading info for ${yellow}$NEWSHOWNAME${NC}.."
  TVjson=$(curl -X GET --header "Accept: application/json" --header "Authorization: Bearer ${token}" "https://api.thetvdb.com/series/${tvdbID}")
  echo ${TVjson} >> "$seriesinfo"
 else
  TVjson=$(cat "$seriesinfo")
 fi #if seriesinfo exists
 
 if [ ! -f "$episodeinfo" ]; then
  echo "creating $episodeinfo ..."
  mkdir -p "$tvPath/$NEWSHOWNAME/.showdata"
  echo -e "${red}Downloading episode info for ${yellow}$NEWSHOWNAME${NC}.."
  episodesjson=$(curl -X GET --header "Accept: application/json" --header "Authorization: Bearer ${token}" "https://api.thetvdb.com/series/${tvdbID}/episodes")
  echo ${episodesjson} >> "$episodeinfo"
 else
  episodesjson=$(cat "$episodeinfo")
 fi #if episodeinfo exists

else
 #this is a new show, download the json files
  seriesinfo="/tmp/$NEWSHOWNAME"".seriesinfo.json"
  episodeinfo="/tmp/$NEWSHOWNAME"".episodeinfo.json"
  echo -e "${red}Downloading info for ${yellow}$NEWSHOWNAME${NC}.."
  TVjson=$(curl -X GET --header "Accept: application/json" --header "Authorization: Bearer ${token}" "https://api.thetvdb.com/series/${tvdbID}")
  echo ${TVjson} >> "$seriesinfo"

  echo -e "${red}Downloading Episode information...${NC}"
  episodesjson=$(curl -X GET --header "Accept: application/json" --header "Authorization: Bearer ${token}" "https://api.thetvdb.com/series/${tvdbID}/episodes")
  echo ${episodesjson} >> "$episodeinfo"

fi #if update == 1

imdbID=`echo "$TVjson" |jq '.[]' |jq '.imdbId' |sed 's/\"//g'`
overview=`echo "$TVjson" |jq '.[]' |jq '.overview' |sed 's/\"//g'`

SeasonsAvailable=$(NS=$(echo $episodesjson |jq '.data[]' |jq '.airedSeason');IFS=$'\n' s=(${NS[0]});echo "${s[*]}" |sort -nr |head -n1)


#echo "sa: $SeasonsAvailable"
#NS=$(echo "$episodesjson" |jq '.data[]' |jq '.airedSeasons')
#IFS=$'\n' seasons=(${NS[0]})
#SeasonsAvailable=$(echo "${seasons[*]}" |sort -nr |head -n1)

} #grab_from_tvdb


function finalize_info(){
pa=
while [ "$pa" == "" ]; do
#clear
echo -e "\nSetting up ${yellow}$NEWSHOWNAME${NC}..."
if [ -d "$tvPath/$NEWSHOWNAME" ]; then
 echo -n "   |_Using "
else
 echo -n "   |_Creating "
fi
echo -e "${gray}$tvPath${NC}/${red}$NEWSHOWNAME${NC}"

if [ "$currently_on_air" == "1" ]; then
  echo -en "     ${green}Currently On Air${NC}   "
else
  echo -en "     ${red}Series Ended${NC}   "
fi

if [ "$active_download" == "1" ]; then
  echo -en "  ${green}Active Download${NC}"
else
  active_download=0
  if [ "$currently_on_air" == "1" ]; then
    echo -en "${red}"
  else
    echo -en "${yellow}"
  fi
  echo -en "Not Currently Downloading ($active_download)${NC}"
fi

if [ ! -d "$tvPath/$NEWSHOWNAME" ]; then
 SeasonsOwned=0
else
 SeasonsOwned=$(ls "$tvPath/$NEWSHOWNAME" |grep "Season" |grep -v "Season 00"|wc -l)
fi

echo -en "   Seasons: ${yellow}$SeasonsOwned / $SeasonsAvailable${NC}"

 echo -en "\nDo you want to:  Change [C]urrent / Change [D]ownload / [P]roceed / [Q]uit? : "
 read pa
 case "$pa" in
  [cC] ) currently_on_air=$(toggle_boolean $currently_on_air);pa=;;
  [dD] ) active_download=$(toggle_boolean $active_download);pa=;;
  [qQ] ) echo "Quitting!";write_out_info "quit";exit 0;;
  [pP] ) echo "Proceeding...";write_out_info;;
  *    ) pa=;;
 esac
done
} #finalize_info

 
function write_out_info(){
 fields="id,showname,seasons_owned,seasons_aired,episodes_owned,episodes_aired,size_on_disk,currently_on_air,active_download,thetvdb_id,imdb_id"

 si="$tvPath/$NEWSHOWNAME/.showdata/seriesinfo.json"
 ei="$tvPath/$NEWSHOWNAME/.showdata/episodeinfo.json"


 if [ "$1" == "quit" ]; then 
  echo -e "${yellow}Steps that would have been taken:${NC}"
  echo -e " |_ Creating Path at $tvPath/$NEWSHOWNAME ..."
  echo -e "  |_mv $seriesinfo $si"
  echo -e "  |_mv $episodeinfo" "$ei"
  echo ""
 else

 if [ ! -d "$tvPath/$NEWSHOWNAME/.showdata" ]; then
  echo -e "     |_ Creating Path at $tvPath/$NEWSHOWNAME ..."
  mkdir -p "$tvPath/$NEWSHOWNAME/.showdata"
 else
  echo -e "     |_ Updating Path at $tvPath/$NEWSHOWNAME ..."
 fi
  if [ -f "$seriesinfo" ] && [ "$seriesinfo" != "$si" ]; then
    mv "$seriesinfo" "$si"
  fi
  if [ -f "$episodeinfo" ] && [ "$episodeinfo" != "$ei" ]; then
    mv "$episodeinfo" "$ei"
  fi

 #Use apostrophe's appropriately for mysql
 MSHOWNAME=`echo "$NEWSHOWNAME" | sed "s;';'';"`

 echo -e "      |_ Checking DB ..."
  query="select id from VideoLibrary.tvShows where showname=\"$MSHOWNAME\""
  showExists=$(echo "$query"|mysql -N)
  if [ "$showExists" == "" ]; then
   query="select id from VideoLibrary.tvShows where showname=\"$NEWSHOWNAME\""
   showExists=$(echo "$query"|mysql -N)
  fi

 if [ "$showExists" != "" ]; then
  Size=$(du -sh "$tvPath/$NEWSHOWNAME" |awk '{print $1}' |rev|cut -c 2-|rev)
  echo -e "        ${green}DB Entry Exists${NC}"
  query="Update VideoLibrary.tvShows set seasons_owned=\"$SeasonsOwned\",seasons_aired=\"$SeasonsAvailable\",size_on_disk=\"$Size\",currently_on_air=\"$currently_on_air\",active_download=\"$active_download\",imdb_id=\"$imdbID\" where id=$showExists"
 else
  echo -e "         ${yellow}Creating Database Entry ...${NC}"
  query="INSERT INTO  VideoLibrary.tvShows ($fields) VALUES (NULL,'$MSHOWNAME','$SeasonsOwned','$SeasonsAvailable','','','','$currently_on_air','$active_download','$tvdbID','$imdbID')"
 fi
  #echo "query would be:"
  #echo "$query"
#  echo "dbOptions is $dbOptions"
   echo "$query" |mysql -N
   echo "Running query..."
   echo "$query"
   echo "---------"
 fi #if !quit
} #write_out_info



##MAIN##
get_new_show_names "$2"
grab_from_tvdb
#download_epguides
finalize_info
##test_out_info
##write_out_info

