#!/bin/bash

function print_movie_array(){
for i in {0..28}; do
 echo -e "[$i]:\t${nameArray[$i]}\t${searchTerms[$i]}"
done
} #END print_movie_array

function print_full_array() {
clear
LC=0
RC=15
leftMax=33
rightMax=33
while [ $RC -lt ${#nameArray[@]} ]; do
 if [ $LC -lt 10 ]; then
  echo -en "${yellow}[$LC ]${NC}"
 else
  echo -en "${yellow}[$LC]${NC}"
 fi
 echo -en "${cyan}["
 cur=${nameArray[$LC]}
 curLen=${#cur}
 if [ $curLen -lt 13 ]; then
  addSpace=$((13-$curLen))
  addSpace=$(($addSpace/2))
  c=1;blanks=;while [ $c -le $addSpace ]; do
   blanks="$blanks "
   c=$((c+1))
  done
  cur="$blanks${cur}$blanks"
  if [ ${#cur} -lt 13 ]; then cur="$cur ";fi
 fi
  echo -en "${cur^^}]${NC}"
 if [ ${#searchTerms[$LC]} -gt $leftMax ]; then
   cur=${searchTerms[$LC]:0:$((leftMax-3))}"..."
 elif [ ${#searchTerms[$LC]} -eq $leftMax ]; then
   cur=${searchTerms[$LC]}
 else
   cur=${searchTerms[$LC]}
   addSpace=$((leftMax-${#searchTerms[$LC]}))
   c=1;blanks=;while [ $c -le $addSpace ]; do
    blanks="$blanks "
    c=$((c+1))
   done
   cur="$cur$blanks"
 fi
 echo -en "[ $cur ] | "
#Now the right Column
 echo -en "${yellow}[$RC]${NC}${cyan}["
 cur=${nameArray[$RC]}
 curLen=${#cur}
 if [ $curLen -lt 13 ]; then
  addSpace=$((13-$curLen))
  addSpace=$(($addSpace/2))
  c=1;blanks=;while [ $c -le $addSpace ]; do
   blanks="$blanks "
   c=$((c+1))
  done
  cur="$blanks${cur}$blanks"
  if [ ${#cur} -lt 13 ]; then cur="$cur ";fi
 fi

 echo -en "${cur^^}]${NC}"
 if [ ${#searchTerms[$RC]} -gt $rightMax ]; then
   cur=${searchTerms[$RC]:0:$((rightMax-3))}"..."
 elif [ ${#searchTerms[$RC]} -eq $rightMax ]; then
   cur=${searchTerms[$RC]}
 else
  if [ $RC == 23 ] && [ ${searchTerms[23]} != "0" ]; then
   cur=${searchTerms[23]}" ("$(echo "select name from $collectionTable where id='${searchTerms[23]}'"|mysql $dbOptions)")"
  elif [ $RC == 25 ] && [ ${searchTerms[25]} != "0" ]; then
   cur=${searchTerms[25]}" ("$(echo "select name from $shelfTable where id='${searchTerms[25]}'"|mysql $dbOptions)")"
  else
   cur=${searchTerms[$RC]}
  fi
   addSpace=$((rightMax-${#cur}))
   c=1;blanks=;while [ $c -le $addSpace ]; do
    blanks="$blanks "
    c=$((c+1))
   done
   cur="$cur$blanks"
 fi
 echo -e "[ $cur ]"

LC=$((LC+1))
RC=$((RC+1))
done


} #END print_full_array

function print_modifiers(){
maxLen=55
i=0
arrayLen=${#searchTerms[@]}
clear

#standardList="1 2 5 7 8 9 15 16 17 23 24 25 29"
while [ $i -le $arrayLen ]; do
 stringZ="${searchTerms[$i]}"
 case "$i" in 
  1|2|5|7|8|9|15|16|17|23|24|25|29 )
  if [ ${#stringZ} -gt $maxLen ]; then
   stringZ="${stringZ:0:$maxLen}"
   stringZ="$stringZ""..."
  fi
  echo -en "[${yellow}$i${NC} - "
  if [[ ( "${searchTerms[$i]}" == "" ) || ( "$i" == "29" && "${searchTerms[$i]}" == "none" ) ]]; then
   echo -en "${red}"
  else
   echo -en "${cyan}"
  fi
  echo -en "${nameArray[$i]}${NC}]:\t"
   if [ $i -ne 5 ] && [ $i -ne 16 ] && [ $i -ne 25 ] && [ $i -ne 29 ]; then
    echo -en "\t"
   fi
  echo -en "$stringZ"
  if [ $i -eq 23 ] || [ $i -eq 25 ]; then
    qString="select name from"
    if [ $i -eq 23 ]; then qString="$qString $collectionTable"; else qString="$qString $shelfTable";fi
    qString="$qString where id='$stringZ'"
    echo -en " ($(echo "$qString"|mysql $dbOptions))"
  fi
  echo ""
 ;;
 0) echo -e "[${cyan}$i${NC} - ${yellow}${nameArray[$i]}${NC}]:\t\t${yellow}$(next_available_id)${NC}";;
 20) l=$i;;
 *)
 #only print nonstandards if they are blank
  if [ "$stringZ" == "" ]; then
   echo -e "[${yellow}$i${NC} - ${red}${nameArray[$i]}${NC}]:\t"
  fi
 esac
i=$((i+1))
done
} #print_modifiers

function subtitle_options() {
 currentString="${searchTerms[$1]}"
 myINPUT=
 read -p "Subtitles? [E]mbedded, [B]urned in, [S]rt file, [F]oreign Burn-in: " -e myINPUT
 case "${myINPUT,,}" in
  "e") searchTerms[$1]="embedded";;
  "b") searchTerms[$1]="burnin";;
  "s") searchTerms[$1]="srt";;
  "f") searchTerms[$1]="foreign";;
  *) searchTerms[$1]="none";;
 esac
 echo "Subtitle set to ${searchTerms[$1]}"
} #subtitle_options

function update_array() {
 currentString="${searchTerms[$1]}"
 read -p "Update ${nameArray[$1]}: " -i "${searchTerms[$1]}" -e myINPUT
 searchTerms[$1]="$myINPUT"

} #update_array

function did_element_change() {
 stringZ="0"
# for i in {0..28}; do 
i="$1"
 spaceless=$(echo "${dbTerms[$i]}"|sed "s;,\ ;,;g")
 trailingSlash="${dbTerms[$i]}"
 if [ "$trailingSlash" != "" ]; then
  trailingSlash=${trailingSlash:0:$((${#trailingSlash}-1))}
 fi
  if [ "${searchTerms[$i]}" != "${dbTerms[$i]}" ]; then
   #check trailing slash
   if [ "${searchTerms[$i]}" != "$trailingSlash" ]; then
    #check spaces in lists
    if [ "${searchTerms[$i],,}" != "${spaceless,,}" ]; then
      stringZ="1"
    fi
   fi
  fi
# done
echo "$stringZ"
} #did_element_change

function edit_array() {
finishLoop="X"
 print_modifiers
 option_menu="Update? [0-29],[F]ull array print, [C]ancel, [W]rite:"
 read -p "$option_menu " -e finishLoop
while [[ ! $finishLoop =~ $NUMBERS ]] && [ "$finishLoop" != "w" ]; do
  case "${finishLoop,,}" in 
  "f" ) print_full_array; read -p "$option_menu " -e finishLoop;;
  "c" ) YesNo "Are you sure you want to cancel? No changes will be saved." "n"
           [ "$?" == "1" ] && exit 0 || read -p "$option_menu " -e finishLoop;;
  esac
 if [[ $finishLoop =~ $NUMBERS ]] && [ $finishLoop -le ${#searchTerms[@]} ]; then
   #Shelf, Collection, Number
   case "$finishLoop" in
    #if changing Shelf or Collection details
    23|24|25 ) prompt_for_sets ${searchTerms[27]} $dbID
               for i in {15..17}; do
                searchTerms[$i]=$(merge_terms "${nameArray[$i]}" "${searchTerms[$i]}")
               done
               ;;
    #path is based on Shelf and collection
    21|22 ) prompt_for_sets ${searchTerms[27]} $dbID;;
    29 ) subtitle_options "$finishLoop";;
    *) update_array "$finishLoop";;
   esac
 fi
 [ "${finishLoop,,}" != "w" ] && read -p "$option_menu " -e finishLoop
 [[ $finishLoop =~ $NUMBERS ]] && read -p "$option_menu " -e finishLoop
done
#After editing, rebuild paths and terms
searchTerms[21]=$(build_paths)
searchTerms[22]=$(build_paths "url")
if [ "${searchTerms[23]}" != "0" ] && [ "${searchTerms[25]}" != "0" ]; then
 rebuild=0
 for i in {15..17} {21..25}; do
  if [ $(did_element_change "$i") -eq 1 ]; then
   if [ "$rebuild" == "0" ]; then rebuild="$i"; else
   rebuild="$rebuild$i"
   fi
  fi
 done
 if [ "$rebuild" != "0" ]; then
  YesNo "$rebuild: Rebuild Genres/Keywords/Tags from Shelf/Set?" "y"
   if [ "$?" == "1" ]; then
    for i in {15..17}; do
     searchTerms[$i]=$(merge_terms "${nameArray[$i]}" "${searchTerms[$i]}")
    done
   fi #if YesNo
 fi #if rebuild
fi #if in shelf or collection
} #edit_array

